#!/usr/bin/env python

import os
import sys

from waflib import Logs
import genpybind_waf


def options(opt):
    opt.load("python")
    opt.load("compiler_cxx")

    opt.load("waf_unit_test")
    opt.load("pytest")

    opt.add_option(
        "--update-snapshots", action="store_true", default=False,
        help="Update snapshot artifacts for record/replay tests",
    )

    opt.add_option(
        "--pybind11-includes", type="string",
        default=os.environ.get("PYBIND11_INCLUDES", ""), dest="pybind11_includes",
        help="""path to the directory where the pybind11 includes are,
        e.g., /path/to/pybind11/include""")


def configure(cfg):
    cfg.load("python")
    cfg.load("compiler_cxx")
    cfg.check_python_version((2, 7))
    cfg.check_python_headers()
    genpybind_waf.configure(cfg)

    cfg.load("waf_unit_test")
    cfg.load("pytest")

    cfg.check(
        compiler="cxx",
        features="cxx cxxshlib pyext",
        uselib_store="PYBIND11",
        mandatory=True,
        header_name="pybind11/pybind11.h",
        cxxflags="-std=c++17",
        includes=cfg.options.pybind11_includes,
    )

    cfg.find_program(
        "pytest{}".format(cfg.env.PYTHON_VERSION[0]), mandatory=False, var="PYTEST")
    if not cfg.env.PYTEST:
        cfg.find_program("pytest", mandatory=True, var="PYTEST")


PYTEST_SUCCESS = 0
PYTEST_NO_TESTS = 5


def test_summary(bld):
    if bld.options.no_tests:
        return

    any_failed = False
    for (fpath, code, stdout, stderr) in getattr(bld, "utest_results", []):
        rel = os.path.relpath(fpath, bld.path.abspath())

        color = {PYTEST_SUCCESS: "GREEN"}.get(code, "RED")

        if code != PYTEST_SUCCESS:
            any_failed = True

        if not isinstance(stdout, str):
            stdout = stdout.decode(sys.stdout.encoding, errors="replace")
        if not isinstance(stderr, str):
            stderr = stderr.decode(sys.stderr.encoding, errors="replace")

        summary = stdout.strip().rsplit("\n", 1)[-1]
        Logs.pprint(color, "{} -> {}".format(rel, summary))

        if code not in [PYTEST_SUCCESS, PYTEST_NO_TESTS]:
            Logs.pprint("NORMAL", stdout)

        if stderr.strip():
            Logs.pprint("PINK", stderr)

    if any_failed:
        bld.fatal("failed or missing tests")


def build(bld):
    report_dir = bld.path.get_bld().make_node("reports")
    junit_option = lambda node: "--junit-xml={}".format(
        report_dir.find_or_declare(node.change_ext(".xml").name))

    bld.options.clear_failed_tests = True  # always rebuild failed tests
    check_snapshot_command = "${PYTHON} check-snapshot.py ${SRC}"
    if bld.options.update_snapshots:
        check_snapshot_command += " --update"

    for node in bld.path.ant_glob("*.cpp"):
        target = os.path.splitext(node.name)[0]
        pytarget = "py{0}".format(target)
        header = node.parent.find_node("{0}.h".format(target))
        test = node.parent.find_node("{0}_test.py".format(target))

        bld(
            target=target,
            source=node,
            features="cxx cxxshlib pyembed",
            use=["PYBIND11"],
            export_includes=".",
            cxxflags="-std=c++17",
            install_path=None,
        )

        bld(
            target=pytarget,
            source=header,
            features="genpybind cxx cxxshlib pyext pyembed",
            genpybind_tags=["all_tests", target],
            use=[target, "PYBIND11"],
            install_path=None,
            linkflags='-Wl,-z,defs',
            pytest_path=[bld.path.get_bld()],
        )

        run_after = []
        if target.startswith("typedefs_across_modules"):
            run_after.append("pytypedefs_definition")

        bld(
            pytest_source=test,
            features="pytest",
            use=pytarget,
            run_after=run_after,
            ut_str="${PYTEST} -q ${SRC} " + junit_option(test),
        )

        # There can optionally be a version-dependent snapshot file.
        snapshot = node.parent.find_node(
            "expected/{0}.py{1}.txt".format(target, bld.env.PYTHON_VERSION)
        ) or node.parent.make_node("expected/{0}.txt".format(target))
        if not snapshot.exists():
            snapshot.write("")

        bld(
            pytest_source=[header, snapshot],
            features="pytest",
            use=pytarget,
            run_after=run_after,
            ut_str=check_snapshot_command,
        )

    for test in bld.path.ant_glob("*_unit_test.py"):
        bld(
            pytest_source=test,
            features="pytest",
            use="genpybind",
            ut_str="${PYTEST} -q ${SRC} " + junit_option(test),
        )

    bld.add_post_fun(test_summary)
